import type { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head'
import {
    Avatar,
    Box,
    Button,
    Grid,
    ListItem,
    ListItemAvatar,
    ListItemText,
    TextField,
    Typography
} from "@material-ui/core";
import { CreditCard, Product } from "../../../models";
import http from "../../../http";
import axios from "axios";
import { useForm } from "react-hook-form";
import { useSnackbar } from "notistack";
import { useRouter } from "next/router";

interface OrderDetailsPageProps {
    product: Product
}

const OrderPage: NextPage<OrderDetailsPageProps> = ({ product }) => {
    const { register, handleSubmit, setValue } = useForm<CreditCard>();
    const { enqueueSnackbar } = useSnackbar();
    const router = useRouter();

    const handleFormSubmit = async (data: CreditCard) => {
        console.log(data);
        try {
            const { data: order } = await http.post('orders', {
                credit_card: data,
                items: [
                    {
                        product_id: product.id,
                        quantity: 1
                    }
                ]
            });
            // await router.push(`/orders/${order.id}`)
            console.log(order);
        } catch (e) {
            console.error(axios.isAxiosError(e) ? e.response?.data : e);
            enqueueSnackbar('Error making your order.', {
                variant: 'error'
            })
        }

    }

    return (
        <div>
            <Head>
                <title>Payment</title>
                {/*<meta name="description" content="Generated by create next app" />*/}
                {/*<link rel="icon" href="/favicon.ico" />*/}
            </Head>
            <Typography component="h1" variant="h3" color="textPrimary" gutterBottom>
                Checkout
            </Typography>
            <ListItem>
                <ListItemAvatar>
                    <Avatar src={product.image_url}/>
                </ListItemAvatar>
                <ListItemText
                    primary={product.name}
                    secondary={`R$ ${product.price}`}
                />
            </ListItem>
            <Typography component="h2" variant="h6" gutterBottom>
                Pay with credit card
            </Typography>
            <form onSubmit={handleSubmit(handleFormSubmit)}>
                <Grid container spacing={3}>
                    <Grid item xs={12} md={6}>
                        <TextField {...register('name')}  required label="Name" fullWidth/>
                    </Grid>
                    <Grid item xs={12} md={6}>
                        <TextField {...register('number')} required label="Card's Number" fullWidth inputProps={{ maxLength: 16 }}/>
                    </Grid>
                    <Grid item xs={12} md={6}>
                        <TextField {...register('cvv')} required type="number" label="CVV" fullWidth/>
                    </Grid>
                    <Grid item xs={12} md={6}>
                        <Grid container spacing={3}>
                            <Grid item xs={6}>
                                <TextField {...register('expiration_month', { valueAsNumber: true})}
                                           required type="number" label="Expiration's Month" fullWidth/>
                            </Grid>
                            <Grid item xs={6}>
                                <TextField {...register('expiration_year', { valueAsNumber: true})}
                                           required type="number" label="Expiration's Year" fullWidth/>
                            </Grid>
                        </Grid>
                    </Grid>
                </Grid>
                <Box marginTop={10}>
                    <Button type="submit" variant="contained" color="primary" fullWidth>
                        Pay
                    </Button>
                </Box>
            </form>
        </div>
    )
}

export default OrderPage

export const getServerSideProps: GetServerSideProps<OrderDetailsPageProps, { slug: string }> = async (context) => {
    const { slug } = context.params!;
    try {
        const { data: product } = await http.get(`products/${slug}`)
        // console.log(product);
        return {
            props: {
                product
            }
        }
    } catch (e) {
        if (axios.isAxiosError(e) && e.response?.status === 404) {
            return {
                notFound: true
            }
        }
        throw e;
    }
}
